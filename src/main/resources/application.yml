## yml은 계층형으로 설정한다.
#server.port=8888
server:
  port: 8899

## thymeleaf
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.cache=false
spring:
  thymeleaf:
    prefix: classpath:/templates
    suffix: .html
    cache: false

## devtool # 자동으로 HTML 리로딩
#spring.devtools.livereload.enabled=true
  devtools:
    livereload:
      enabled: true

## MySQL
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/testdb
#spring.datasource.username=user
#spring.datasource.password=1234
## spring.datasource.hikari.auto-commit=false # 기본값은 true
## spring.datasource. ==> 중복되는 부분이 많아 yml로 사용함
--- # 위에 spring이 있지만 구분하기 쉽게 다시 spring을 사용하기 위해 ---을 적고 다시 리셋
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/YnIDB
    username: ynidb
    password: 1234

---
# sql log 출력
spring:
  jpa:
    show-sql: true
    properties: # 보기좋게 log를 출력
      hibernate:
        format_sql: true

---
# ddl-auto      # 이게 뭐지?
spring:
  jpa:
    hibernate:
      ddl-auto: update

---
# 사투리?
spring:
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect

# ddl-auto 속성 종류
#create:
# create는 단어 그대로 엔티티로 등록된 클래스와 매핑되는
# 테이블을 자동으로 생성(create)해준다.
# 이 과정에서 기존에 해당 클래스와 매핑되는 테이블이 존재한다면 기존 테이블을 삭제(drop)하고 테이블을 생성한다.

#create-drop:
# create와 비슷하게 엔티티로 등록된 클래스와 매핑되는 테이블이 존재한다면
# 기존 테이블을 삭제하고 자동으로 테이블을 생성해주는 것은 똑같지만,
# 애플리케이션이 종료될 때 테이블을 삭제한다는 차이가 있다.

# create-drop 옵션을 사용하면 아래와 같이 애플리케이션이 시작될 땐
# create와 동일한 DDL이 작성되지만, 애플리케이션이 종료될 때 테이블을 삭제하게 된다.

#update:
# update는 엔티티로 등록된 클래스와 매핑되는 테이블이 없으면
# 새로 생성하는 것은 create와 동일하지만
# 기존 테이블이 존재한다면 위의 두 경우와 달리 테이블의 컬럼을 변경하게 된다.

#validate:
# validate는 다른 속성들과는 다르게 DDL을 작성하여 테이블을 생성하거나 수정하지 않고,
# 엔티티 클래스와 테이블이 정상적으로 매핑되는지만 검사한다.
# 만약 테이블이 아예 존재하지 않거나, 테이블에 엔티티의 필드에 매핑되는 컬럼이
# 존재하지 않으면 예외를 발생시키면서 애플리케이션을 종료한다.

#none(default)
# none은 사실 속성이 존재하는 것이 아니라 위의 4가지 경우를 제외한 모든 경우에 해당한다.
# (다만 스프링부트의 경우에는 none이라고 명시하거나 아예 ddl-auto 속성을 명시하지 않아야 한다.)
# 이 경우에는 아무 일도 일어나지 않는다.

#log 로그를 보여주는 5단계(PPT 자료에 넣어 놈)
#logging:
#  level:
#    root: info

---
logging:
  level:
    org:
      springframework:
        web:
          servlet: debug
---
logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql:
              BasicBinder: trace

---
# 카카오 회원의 비밀번호 설정
# ==> 카카오로그인서비스단에서 호출예정 @Value 어노테이션 사용
Kakao:
  default:
    password: kakao1234